#!/bin/bash -eu


function __install_terraform_activator() {
    local self=$(readlink -f "${BASH_SOURCE[0]}")
    local dir=$(dirname $self)

    local activator="${1}"
    local version="${2}"

    [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
    cat <<EOD > "${config}"
#!/bin/bash

export TERRAFORM_VERSION=${version}
export TERRAFORM_HOME=\${TOOLS_HOME:=\$HOME/tools}/terraform-\${TERRAFORM_VERSION}

export PATH=\${TERRAFORM_HOME}:\${PATH}
EOD
    chmod ugo+x "${config}"
    echo "${config}"
}

function __install_terraform_binaries() {
    local self=$(readlink -f "${BASH_SOURCE[0]}")
    local dir=$(dirname $self)

    local default="1.0.6"
    local current="${TERRAFORM_VERSION:-${default}}"
    ### local latest="$(curl -I ${url} 2>/dev/null | fgrep location: | tr -d [:cntrl:] | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')"
    local latest="${default}"
    local version="${1:-${latest}}"                 # user can force a version, passing it on the first parameter
    local version="${version:-${current}}" # falls back to current installed version, if any
    local version="${version:-${default}}" # falls back to default version

    local osarch=$(uname -s | tr [:upper:] [:lower:])
    local hwarch=$(uname -m)
    case "${hwarch}" in
        armv7l) hwarch=arm ;;
        x86_64) hwarch=amd64 ;;
        i386)   hwarch=386 ;;
        *) echo "ERROR: Could not install Terraform on platform ${osarch}-${hwarch}" ; return 1 ;;
    esac
    local arch=${1:-"linux_amd64"}

    local file=terraform_${version}_${arch}.zip
    local url=https://releases.hashicorp.com/terraform/${version}/${file}
    local folder=terraform-${version}
    local symlink=terraform

    local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/271-terraform.sh
    __install_terraform_activator "${config}" "${version}"

    "${dir}"/bash_install_zip "${url}" "${file}" "${folder}" "${symlink}"
}

function __install_terraform_libvirt() {
    local self=$(readlink -f "${BASH_SOURCE[0]}")
    local dir=$(dirname $self)
    local version=0.6.11
    local hwarch=amd64
    local swarch=linux
    local arch=${swarch}_${hwarch}
    
    apt+ install lsb-release
    ##FIXME:: This is a temporary hack, until this plugin reaches Terraform Registry
    case $(lsb_release -sd | sed 's/ /_/g' | sed 's/"//g') in
        openSUSE_Tumbleweed)
            local file=terraform-provider-libvirt_${version}_${arch}.zip ;
            local url=https://github.com/dmacvicar/terraform-provider-libvirt/releases/download/v${version}/${file} ;
            local folder=~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/${version}/${arch}/ ;
            local symlink=. ;
            local options= ;
            [[ ! -d "${folder}" ]] && mkdir -p "${folder}" ;
            "${dir}"/bash_install_zip "${url}" "${file}" "${folder}" "${symlink}" "${options}";;
        *) echo "ERROR: Could not install Terraform plugin for Libvirt" ; return 1 ;;
    esac
}


function __install_terraform() {
    __install_terraform_binaries || __install_terraform_libvirt
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi
