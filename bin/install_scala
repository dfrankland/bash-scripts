#!/bin/bash -eu

function __install_scala_activator {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  local activator="${1}"
  local version="${2}"

  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export SCALA_VERSION=${version}
export SCALA_HOME=\${TOOLS_HOME:=\$HOME/tools}/scala-\${SCALA_VERSION}
export COURSIER_HOME=\${HOME}/.local/share/coursier

export PATH=\${SCALA_HOME}/bin:\${COURSIER_HOME}/bin:\${PATH}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}    

function install_scala_binaries {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  which wget >/dev/null 2>&1 || apt+ install wget

  local latest=https://github.com/scala/scala/releases/latest
  local version=$(wget -q -SO- -T 5 -t 1 "${latest}" 2>/dev/null | fgrep location: | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')
  local version=${version:-"2.13.6"}
  local version=${1:-"${version}"}
  local major=$(echo ${version} | cut -d. -f1-2)

  if [[ $version =~ ^(3\.).* ]] ;then
    local file=scala3-${version}.tar.gz
    local url=https://github.com/lampepfl/dotty/releases/download/${version}/${file}
    local folder=scala-${version}
    local symlink=scala-${major}
    "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "${symlink}" "--strip-components=1"
  else
    local file=scala-${version}.tgz
    local url=https://downloads.lightbend.com/scala/${version}/${file}
    local folder=scala-${version}
    local symlink=scala-${major}
    
    "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "${symlink}" "--strip-components=1"

    #-- This is all about installing documentation and sources, which is now deprecated. Kept here for historical reasons.
    # "${dir}"/bash_install_tar "https://scala-lang.org/files/archive/scala-docs-${version}.txz" "scala-docs-${version}.txz" "scala-${version}" "scala-${major}" "--strip-components=1"
    # local tools="${TOOLS_HOME:=$HOME/tools}"
    # "${dir}"/httrack_fetch "https://www.scala-lang.org/files/archive/spec/${major}" "${tools}/${folder}/scala-${version}/spec"
    # "${dir}"/httrack_fetch "https://scala-lang.org/files/archive/api/${version}"    "${tools}/${folder}/scala-${version}/api"
  fi

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/351-scala.sh
   __install_scala_activator "${config}" "${version}"
}

function install_scala_coursier {
  [[ -d ${HOME}/bin ]] | mkdir -p ${HOME}/bin
  if [ ! -e ${HOME}/bin/coursier ] ;then
    curl -L -o ${HOME}/bin/coursier https://git.io/coursier-cli-linux \
      && chmod +x ${HOME}/bin/coursier \
        && ${HOME}/bin/coursier --help
  fi
}

function install_scala_metals_emacs {

  ## Scala version
  ## For some unknown reason, we need to pin Scala version to 2.12
  local SCALA_VERSION=2.12.14
  local SCALA_VERSION_MAJOR=2.12
  ## local latest=https://github.com/scala/scala/releases/latest
  ## local version=$(wget -q -SO- -T 5 -t 1 "${latest}" 2>/dev/null | fgrep location: | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')
  ## local version=${version:-"2.13.6"}
  ## local SCALA_VERSION=${1:-"${version}"}
  ## local SCALA_VERSION_MAJOR=$(echo ${SCALA_VERSION} | cut -d. -f1-2)

  ## Metals version
  local latest=https://github.com/scalameta/metals/releases
  local version=$(wget -q -SO- -T 5 -t 1 "${latest}" 2>/dev/null | fgrep location: | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')
  local version=${version:-"0.10.7"}
  local METALS_VERSION=${2:-"${version}"}

  [[ -d ${HOME}/bin ]] | mkdir -p ${HOME}/bin
  ${HOME}/bin/coursier bootstrap \
    --java-opt -Xss4m \
    --java-opt -Xms100m \
    --java-opt -Dmetals.client=emacs \
    org.scalameta:metals_${SCALA_VERSION_MAJOR}:${METALS_VERSION} \
    -r bintray:scalacenter/releases \
    -r sonatype:snapshots \
    -o ${HOME}/bin/metals-emacs -f
}


function __install_scala {
  local scala_version="${1:-2.13}"
  local scala_metals_version="${2:-0.10.7}"
  install_scala_binaries ${scala_version} && \
    install_scala_coursier && \
      install_scala_metals_emacs ${scala_version} ${scala_metals_version}
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi
