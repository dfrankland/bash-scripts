#!/bin/bash -eu


function __install_maven_activator() {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  local activator="${1}"
  local version="${2}"

  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export M2_VERSION=${version}
export M2_HOME=\${TOOLS_HOME:=\$HOME/tools}/apache-maven-\${M2_VERSION}
export MAVEN_OPTS="-Xmx2048m"

export PATH=\${M2_HOME}/bin:\${PATH}
EOD

  chmod ugo+x "${config}"
  echo "${config}"
}    

function install_maven_binaries {
  local default="3.8.1"
  local current="${MAVEN_VERSION:-${default}}"
  local version=${1:-"$current"}

  local file=apache-maven-${version}-bin.tar.gz
  local url=https://downloads.apache.org/maven/maven-3/${version}/binaries/${file}
  local folder=maven-${version}
  local symlink=maven

  local tools="${TOOLS_HOME:-$HOME/tools}"
  local Software="${SOFTWARE:=/mnt/omv/Software}"

  [[ ! -d "${DOWNLOADS}" ]] && mkdir -p "${DOWNLOADS}"
  [[ ! -d "${tools}" ]] && mkdir -p $tools

  local archive=""
  if [[ -f "${Software}/Linux/${file}" ]] ;then
    local archive="${Software}/Linux/${file}"
  elif [[ -f "${DOWNLOADS}"/${file} ]] ;then
    local archive="${DOWNLOADS}/${file}"
  fi
  if [[ -z "${archive}" ]] ;then
    local archive="${DOWNLOADS}/${file}"
    which wget >/dev/null 2>&1 || apt+ install wget
    wget "$url" -O "${archive}"
  fi

  if [ ! -d "${tools}/${folder}" ] ;then
    which tar >/dev/null 2>&1 || apt+ install tar
    tar -C "${tools}" -xpf "${archive}"
  fi
  if [ ! -z "${symlink}" ] ;then
    if [ -L "${tools}/${symlink}" ] ;then rm "${tools}/${symlink}" ;fi
    ln -s "${folder}" "${tools}/${symlink}"
  fi

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/380-maven.sh
  __install_maven_activator "${config}" "${version}"
}

function __install_maven {
  self=$(readlink -f "${BASH_SOURCE[0]}"); dir=$(dirname $self)
  grep -E "^function [a-zA-Z0-9]" $self | cut -d' ' -f2 | while read cmd ;do
    $cmd $*
  done
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi
